# === @begin: Headers Configuration ===
set(nccl_Major ${nccl_VERSION_MAJOR})
set(nccl_Minor ${nccl_VERSION_MINOR})
set(nccl_Patch ${nccl_VERSION_PATCH})
# NCCL_VERSION(X,Y,Z) ((X) * 10000 + (Y) * 100 + (Z))
math(
    EXPR
    nccl_Version
    "${nccl_VERSION_MAJOR} * 10000 + ${nccl_VERSION_MINOR} * 100 + ${nccl_VERSION_PATCH}"
)

# By default, it's an empty string, but we still must define it otherwise `configure_file` will fail.
# In theory, one who builds this package may define that to unique value to be used in a `nccl` version string.
# We, however, don't do that in Eugo environment and keep it mostly for compatability with original Makefile builds.
set(nccl_Suffix "")

# Define a directory where we will place the configured (generated by filling placeholders in `nccl.h.in` file) `nccl.h` header file.
# And other headers that may be generated in the future.
set(CONFIGURED_HEADERS_DIR "${CMAKE_CURRENT_BINARY_DIR}/include")
file(MAKE_DIRECTORY "${CONFIGURED_HEADERS_DIR}")

configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/nccl.h.in
    ${CONFIGURED_HEADERS_DIR}/nccl.h
)
# === @end: Headers Configuration ===


# === @begin: device/ ===
add_subdirectory(device)
# === @end: device/ ===


# === @begin: nccl library ===
set(NCCL_SRC_FILES
    # === @begin: / ===
    bootstrap.cc
    channel.cc
    collectives.cc
    debug.cc
    enhcompat.cc
    enqueue.cc
    group.cc
    init_nvtx.cc
    init.cc
    mnnvl.cc
    proxy.cc
    transport.cc
    # === @end: / ===

    # === @begin: misc/ ===
    misc/argcheck.cc
    misc/cudawrap.cc
    misc/gdrwrap.cc
    misc/ibvsymbols.cc
    misc/ibvwrap.cc
    misc/ipcsocket.cc
    misc/nvmlwrap.cc
    misc/param.cc
    misc/shmutils.cc
    misc/socket.cc
    misc/strongstream.cc
    misc/utils.cc
    # === @end: misc/ ===

    # === @begin: plugin/ ===
    plugin/net/net_v6.cc
    plugin/net/net_v7.cc
    plugin/net/net_v8.cc
    plugin/net/net_v9.cc
    plugin/net/net_v10.cc
    plugin/profiler/profiler_v1.cc
    plugin/profiler/profiler_v2.cc
    plugin/profiler/profiler_v3.cc
    plugin/tuner/tuner_v2.cc
    plugin/tuner/tuner_v3.cc
    plugin/tuner/tuner_v4.cc
    plugin/net.cc
    plugin/plugin_open.cc
    plugin/profiler.cc
    plugin/tuner.cc
    # === @end: plugin/ ===

    # === @begin: transport/ ===
    transport/coll_net.cc
    transport/generic.cc
    transport/net_ib.cc
    transport/net_socket.cc
    transport/net.cc
    transport/nvls.cc
    transport/p2p.cc
    transport/profiler.cc
    transport/shm.cc
    # === @end: transport/ ===

    # === @begin: graph/ ===
    # === @begin: Header Files ===
    # @TODO+:Slava_n_Ben:check either they are public or private. More likely, the latter.
    graph/rings.h
    graph/topo.h
    graph/xml.h
    # === @@end: Header Files ===

    # === @@begin: Source Files ===
    graph/connect.cc
    graph/paths.cc
    graph/rings.cc
    graph/search.cc
    graph/topo.cc
    graph/trees.cc
    graph/tuning.cc
    graph/xml.cc
    # === @@end: Source Files ===
    # === @end: graph/ ===

    # === @begin: register/ ===
    register/coll_reg.cc
    register/register.cc
    register/sendrecv_reg.cc
    # === @end: register/ ===
)

set_source_files_properties(
    plugin/net/net_v6.cc
    plugin/net/net_v7.cc
    plugin/net/net_v8.cc
    plugin/net/net_v9.cc
    plugin/net/net_v10.cc
    plugin/profiler/profiler_v1.cc
    plugin/profiler/profiler_v2.cc
    plugin/profiler/profiler_v3.cc
    plugin/tuner/tuner_v2.cc
    plugin/tuner/tuner_v3.cc
    plugin/tuner/tuner_v4.cc

    PROPERTIES SKIP_UNITY_BUILD_INCLUSION ON
)

add_library(nccl SHARED ${NCCL_SRC_FILES} $<TARGET_OBJECTS:colldevice>)

set_target_properties(
    nccl
    PROPERTIES
        VERSION ${nccl_VERSION}
        SOVERSION ${nccl_VERSION_MAJOR}
)

target_include_directories(
    nccl
    PUBLIC
        $<BUILD_INTERFACE:${CONFIGURED_HEADERS_DIR}>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/plugin>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)
target_include_directories(
    nccl
    PUBLIC
        ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}
)

set_property(TARGET nccl PROPERTY CUDA_SEPARABLE_COMPILATION ON)
set_property(TARGET nccl PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS ON)

# Only nccl.h and nccl_net.h are public headers and only they are installed!
set(INCEXPORTS
    ${CONFIGURED_HEADERS_DIR}/nccl.h
    ${CMAKE_CURRENT_SOURCE_DIR}/include/plugin/nccl_net.h
    PARENT_SCOPE
)
# === @end: nccl library ===


# === @begin: ras/ ===
add_subdirectory(ras)
# === @end: ras/ ===